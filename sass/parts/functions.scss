// @if not-imported("your-file") { @import "your-file"; }
$importedOnceFiles: () !default;

@function debugger($values...) {
  //first value function or mixin name
  //second injected value param
  //third returning result
  @each $value in $values {
    @debug '>>>>>>>>>> ========== DEBUG START ========== <<<<<<<<<<';
    @debug 'Running - ' +  nth($value, 1);
    @debug 'Injected - ' +  nth($value, 2);
    @debug 'Result - ' +  nth($value, 3);
    @debug '>>>>>>>>>> ========== DEBUG END ========== <<<<<<<<<<';

  }
  @return true;
}

@function notImported($fileName) {
  $importedOnceFiles: $importedOnceFiles !global;
  $moduleIndex: index($importedOnceFiles, $fileName);
  @if (($moduleIndex == null) or ($moduleIndex == false)) {
    $importedOnceFiles: append($importedOnceFiles, $fileName);
    @return true;
  }
  @return false;
}

@function px($size) {
  @return $size+px;
}

@function em($size: 16) {
  @return $size / 16+em;
};

@function rem($size: 16) {
  @return $size / 16+rem;
};

@function toType($size, $type:px) {
  @return ($type($size));
}

@function getVw($maxBreakpoint, $target) {
  // 1 vw is equal to 1% of the viewport width
  $vwContext: ($maxBreakpoint * .01) * 1; // 1% viewport width
  @return ($target/$vwContext) * 1vw;
}

@function getVh($maxBreakpoint, $target) {
  // 1 vh is equal to 1% of the viewport height
  $vwContext: ($maxBreakpoint * .01) * 1; // 1% viewport height
  @return ($target/$vwContext) * 1vh;
}

@function multiFetch($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

@function changeMultidimensionalMapValue($map, $keys, $value) {
  $maps: ($map,);
  $result: null;

  // If the last key is a map already
  // Warn the user we will be overriding it with $value
  @if type-of(nth($keys, -1)) == "map" {
    @warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
  }

  // If $keys is a single key
  // Just merge and return
  @if length($keys) == 1 {
    @return map-merge($map, ($keys: $value));
  }

  // Loop from the first to the second to last key from $keys
  // Store the associated map to this key in the $maps list
  // If the key doesn't exist, throw an error
  @for $i from 1 through length($keys) - 1 {
    $currentKey: nth($keys, $i);
    $currentMap: nth($maps, -1);
    $currentGet: map-get($currentMap, $currentKey);
    @if $currentGet == null {
      @error "Key `#{$key}` doesn't exist at current level in map.";
    }
    $maps: append($maps, $currentGet);
  }

  // Loop from the last map to the first one
  // Merge it with the previous one
  @for $i from length($maps) through 1 {
    $currentMap: nth($maps, $i);
    $currentKey: nth($keys, $i);
    $currentVal: if($i == length($maps), $value, $result);
    $result: map-merge($currentMap, ($currentKey: $currentVal));
  }

  // Return result
  @return $result;
}

@function widthToPercent($elementPixelWidth: 0, $wrapPixelsWidth: 0) {
  @if ($debug == true) {
    @return debugger((function widthToPercent) ($elementPixelHeight $wrapPixelsHeight) (percentage($elementPixelHeight/$wrapPixelsHeight)));
  } @else {
    @return percentage($elementPixelWidth/$wrapPixelsWidth);
  }
}

@function heightToPercent($elementPixelHeight: 0, $wrapPixelsHeight: 0, $doubleTo: 1.5) {

  @if ($debug == true) {
    @return debugger((function heightToPercent) ($elementPixelHeight $wrapPixelsHeight $doubleTo) (percentage($elementPixelHeight/$wrapPixelsHeight) * $doubleTo));
  } @else {
    @return percentage($elementPixelHeight/$wrapPixelsHeight) * $doubleTo;
  }
}

@function setFontFamily($fontName: null) {
  $font: $fontName;
  @if ($fontName == 'Assistant') {
    $font: 'Assistant', sans-serif;
  } @else if ($fontName == 'Open') {
    $font: 'Open Sans Hebrew', sans-serif;
  } @else if($fontName == 'Almoni') {
    $font: 'Almoni';
  } @else {
    $font: $fontName;
  }

  @if ($debug == true) {
    @return debugger((function setFontFamily) $fontName $font);
  } @else {
    @return $font;
  }
}

@function setCalcWidth($number) {

  @if ($number == 0) {
    $calcWidth: 100%;
  } @else {
    $calcWidth: calc(100% - #{$number});
  }

  @if ($debug == true) {
      @return debugger((function setCalcWidth) $number $calcWidth);
  } @else {
    @return $calcWidth;
  }
}


@function setCalcHeight($number) {

  @if ($number == 0) {
    $calcHeight: 100%;

  } @else {
    $calcHeight: calc(100% - #{$number});
  }

  @if ($debug == true) {
    @return debugger((function setCalcHeight) $number $calcHeight);
  } @else {
    @return $calcHeight;
  }
}

@function transition($property: all, $time: 500ms, $style: linear) {
  @return $property $time $style;
}

@function setDisplay($style: null) {

    @if ($style == null) {
      $style: $display;
    } @else {
      $style: $style;
    }
  @return $style;
}